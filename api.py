from fastapi import FastAPI
import pandas as pd
import pickle
from pydantic import BaseModel
import logging
import mlflow
import mlflow.sklearn
from datetime import datetime

# ðŸ“Œ Initialisation FastAPI
app = FastAPI(title="Bike Sharing Prediction API", description="PrÃ©dit le nombre de vÃ©los disponibles dans Londres.")

# ðŸ“Œ Logger pour suivre les requÃªtes
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# ðŸ“Œ Charger le modÃ¨le et lâ€™encoder
MODEL_PATH = "models/model_bike_sharing.pkl"
ENCODER_PATH = "models/encoder_bike.pkl"

with open(MODEL_PATH, "rb") as f:
    model = pickle.load(f)

with open(ENCODER_PATH, "rb") as f:
    weather_encoder = pickle.load(f)

# ðŸ“Œ Initialisation de MLflow
mlflow.set_tracking_uri("http://mlflow-server:5000")  # Lancer MLflow en local
mlflow.set_experiment("Bike Sharing Prediction")

# ðŸ“Œ DÃ©finition du format des requÃªtes
class PredictionInput(BaseModel):
    station: str
    hour: int
    day_of_week: int
    weather: str

@app.get("/")
def home():
    return {"message": "API de prÃ©diction des vÃ©los - Active ðŸš²"}

@app.post("/predict/")
def predict(data: PredictionInput):
    try:
        # ðŸ“Œ Encodage de la mÃ©tÃ©o
        encoded_weather = weather_encoder.transform([data.weather])[0]

        # ðŸ“Œ PrÃ©paration des donnÃ©es pour Prophet
        future = pd.DataFrame({
            "ds": [pd.Timestamp.now()],  # Date actuelle
            "Hour": [data.hour],
            "Day_of_Week": [data.day_of_week],
            "Weather_encoded": [encoded_weather]
        })

        # ðŸ“Œ PrÃ©diction
        forecast = model.predict(future)
        predicted_bikes = max(0, int(forecast["yhat"].values[0]))  # Ã‰vite les valeurs nÃ©gatives

        # ðŸ”¥ Logger dans MLflow
        with mlflow.start_run() as run:
            mlflow.log_param("station", data.station)
            mlflow.log_param("hour", data.hour)
            mlflow.log_param("day_of_week", data.day_of_week)
            mlflow.log_param("weather", data.weather)
            mlflow.log_metric("prediction", predicted_bikes)
            mlflow.log_metric("timestamp", datetime.now().timestamp())

            logging.info(f"âœ… MLflow Run ID: {run.info.run_id}")  # ðŸ”¹ VÃ©rifier si MLflow logge bien

        # ðŸ“Œ Logging standard
        logging.info(f"Prediction demandÃ©e: {data}")
        logging.info(f"RÃ©sultat: {predicted_bikes} vÃ©los")

        return {"station": data.station, "hour": data.hour, "day_of_week": data.day_of_week,
                "weather": data.weather, "predicted_bikes": predicted_bikes}

    except Exception as e:
        logging.error(f"ðŸš¨ Erreur de prÃ©diction: {e}")
        
        # ðŸ”¥ Logger aussi dans MLflow en cas d'erreur
        with mlflow.start_run():
            mlflow.log_param("error", str(e))

        return {"error": str(e)}
